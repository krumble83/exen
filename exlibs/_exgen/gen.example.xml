

<document>
	<include></include>
	<head></head>
	<body></body>
	<footer></footer>
</document>

<cpp:namespace name="" [inline="1"] />
<cpp:using namespace="" [name=""] />

<cpp:extern name="">
	<declaration />
</cpp:extern>

<include name="{name}" from="" as="">
	<name>{name}</name>
	<from>{path}</from>
	<alias>{as}</alias>
</include>

<declare:variable 
	name="{name}" 
	*array="{size}" 
	*cppflags="{cppflags=INLINE|CONSTEXPR}" 
	*js:flags="{jsflags=[var|let|const]}"]
	>
		<type 
			*cpp:flags="POINTER|REFERENCE" 
			*cpp:namespace="{namespace}" 
			*cpp:class="{classname}"]
		>
			{datatype}
		</type>
		<default*>{value}</default*>
</declare:variable>

<assign:variable [operator="+|-|*|/"]>
	<variable>{var}</variable>
	<value>{value}</value>
</assign:variable>

<param inherit="declare:variable" *optional="0|1">

<declare:function 
	name="{name}" 
	*cpp:namespace="{namespace}" 
	*cpp:class="{classname}" 
	*flags="{flags=}" 
	*cpp:flags="{cppflags=INLINE|VIRTUAL|EXPLICIT|PUBLIC|PROTECTED|PRIVATE|FRIEND|CONSTEXPR}" 
	*js:flags="{jsflags=}" 
	*py:flags="{pyflags=}"
>
	<return>
		<declare:variable />
	</return>
	<params>
		<declare:variable />
	</params>
	<body>
		<fragment />
	</body>
</declare:function>

<call:function 
	name="{name}" 
	*object="{object}" 
	*cpp:class="{classname}"
>
	<return>{return}</return>
	<params>
		<value py:name="{pyname}" />
		...
	</params>
</call:function>


<for>
	<init></init>
	<condition></condition>
	<step></step>
	<body></body>
</for>



<condition>
	<var></var>
	<operator></operator>
	<value></value>
	[<then></then>]
	[<elseif></elseif>]
	[<else></else>]
</condition>

<loop type="while|do">
	<var></var>
	<operator></operator>
	<value></value>
	<body></body>
</loop>

<switch name="{name}">
	<case...>
		<value>{value}</value>
		<body>{body}</body>
	</case...>
	<default>
		<body>{default}</body>
	</default>
</switch>

<object>
	<pair>
		<name />
		<value />
	</pair>
</object>

<cast>
	<from />
	<to />
</cast>

<native type="[py|js|cpp]">{value}</native>

<litterals>
	<litteral [delimiter="{delimiter}"]>{value}</litteral>
	<integer>{value}</integer>
	<float>{value}</float>
	<string 
		*js:delimiter="'"
		*cpp:delimiter="\""
		*py:delimiter="\""
	>{value}</string>
</litterals>